{"name":"Django-restroom","tagline":"A super lightweight django REST api framework","body":"# Django-EasyRest\r\n\r\n## What is EasyRest?\r\nEasyRest is a lightweight framework (less than 160 lines of code!) that allows you to really quickly and flexibly create a READ-ONLY REST API for your models.\r\n\r\n## Why would I want to use EasyRest?\r\n* You need a simple read-only REST API for your Backbone/similar app\r\n* You need a read-only API for others to consume. Did you know EasyRest has a simple and extensible authentication system?\r\n\r\n## Wy use EasyRest insetad of Django-Rest, Tastypie, etc?\r\nIn exchange for full-featuredness, those other frameworks are hard to setup and use.\r\nEasyRest is really simple to use and even simpler to extend.\r\n\r\n## What features do I get with EasyRest?\r\nEasyRest is meant to be simple and cover the most common use cases. So it supports,\r\n* pagination\r\n* authentication\r\n* restricting by requesting user\r\n* search\r\n\r\n## How do I install it?\r\n```\r\npip install django-easyrest\r\n```\r\n\r\n## How do I use it?\r\n```\r\n# api.py\r\n\r\nfrom easyrest import API\r\nfrom .models import Item\r\n\r\napi = API()\r\n\r\nclass ItemResource(APIResource):\r\n    model = Item\r\n    name = 'item'\r\n\r\n    def serialize(self, item):\r\n        return {\r\n            'id': item.id,\r\n            'text': item.text,\r\n            'popularity': item.popularity,\r\n        }\r\n\r\napi.register(ItemResource)\r\n\r\n# urls.py\r\nfrom django.conf.urls import url, patterns, include\r\nfrom .api import api\r\n\r\nurlpatterns = patterns('', url(r'^api/', include(api.get_urls())))\r\n```\r\n## Declaring a Resource\r\nYou only need to specify 3 things when subclassing APIResource:\r\n\r\n1. `model`: the Django model you're exposing through the API\r\n2. `name`: this is the name of resource in the url: '/api/{{ name }}/'. If you don't set it, it will fallback to the Model.meta.db_table\r\n3. `serialize` method: returns a serialized version of an instance of your Model, however you want it to. You can reference properties and whatever else. You're not just limited to the model fields.\r\n\r\n## Format of Requests and Responses\r\n\r\n## Pagination\r\nIf you want to paginate the results, you just need to set `results_per_page`. Here's an example:\r\n\r\n```python\r\nclass PaginatedItemResource(APIResource):\r\n    model = Item\r\n    name = 'paginated_item'\r\n    results_per_page = 20\r\n\r\n    def serialize(self, item):\r\n        return {\r\n            'id': item.id,\r\n            'text': item.text,\r\n            'popularity': item.popularity,\r\n        }\r\n```\r\nIf you don't set `results_per_page`, all of the items will be returned at once.\r\n\r\n## Search\r\n## Authentication\r\n## Restricting by User\r\n## Roadmap\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}