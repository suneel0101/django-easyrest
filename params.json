{"name":"Django-restroom","tagline":"A super lightweight django REST api framework","body":"# Django-Restroom: a super lightweight REST API framework\r\n\r\n### Status: This project is still under development!\r\n\r\nWhether you want to create an API for your product for external consumption or you just want to expose a REST API for your own frontend application, Django-Restroom is an incredibly easy and fast way to accomplish that.\r\nYou just register your models and include the restroom urls.\r\n\r\nThere are also additional features such as authentication, pagination and the ability to restrict a resource to return results owned by the requesting user.\r\n\r\n## 1. Register your models\r\nBasic Usage:\r\n```python\r\nfrom myapp.models import MyModel\r\nfrom restroom.core import API\r\napi = API()\r\napi.register(MyModel)\r\n```\r\nThis enables GET requests to the RESTful endpoints for the resource `MyModel`.\r\nGET requests will return serialized results with all of the fields of the model.\r\n\r\nHowever, `register` does take an options dictionary with the following parameters:\r\n\r\n### `http_methods`\r\nThese are the HTTP methods of requests you want to enable for that model resource.\r\nYou can pass in any sublist of [\"GET\", \"POST\", \"DELETE\", \"PUT\"]\r\nIf you do not pass in anything, it will default to only allowing GET requests.\r\n\r\nSample Usage:\r\n```python\r\nfrom myapp.models import MyModel\r\nfrom restroom.core import API\r\napi = API()\r\napi.register(MyModel, {\"http_methods\": [\"GET\", \"POST\", \"PUT\"]})\r\n```\r\n\r\nAny `DELETE` requests to the RESTful endpoints for `MyModel` will return an empty 403 response forbidden.\r\n\r\n### `fields`\r\n\r\nThese are the fields of the model you want to expose to consumers of your api.\r\nThe object's `id` will always be exposed. If you do not pass in anything, it will default to exposing all fields.\r\nWhen the REST endpoints for a model are requested by any method other than the ones you have allowed, a 403 Forbidden response will be returned.\r\n\r\nSample usage:\r\n```python\r\nfrom restroom.core import api\r\nfrom django.db import models\r\n\r\napi = API()\r\n\r\nclass Book(models.Model):\r\n    title = models.CharField(max_length=250)\r\n    author = models.CharField(max_length=100)\r\n    date_published = models.DateTimeField()\r\n\r\napi.register(Book, {\"fields\": [\"title\", \"author\"]})\r\n```\r\nThe results will be serialized so that only the `id`, `title`, `author` fields are in the return JSON.\r\n\r\nThere are two additional optional parameters `needs_auth` and `only_for_user` which will be discussed in the Authentication section.\r\n\r\n### Recommended pattern of registering your models\r\nIt's easiest to the do following, although after using this library just once, you'll feel comfortable enough to register your models however and wherever you'd like.\r\n\r\nIn the same level as your main urlconf, create a file `api.py`\r\nIn `api.py`:\r\n```python\r\nfrom restroom.core import API\r\nfrom apps.thisapp.models import X, Y, Z\r\nfrom apps.otherapp.models import A, B, C\r\n...\r\napi = API()\r\napi.register(X, {\"fields\": [\"text\", \"slug\"]})\r\napi.register(Y, {\"http_methods\": [\"GET\", \"POST\"]})\r\n...\r\n```\r\n\r\n\r\n## 2. Include urls in your main urlconf\r\nFollow the above recommended pattern models. Then your main urls.py\r\n```python\r\nfrom .api import api\r\n...\r\nurlpatterns += patterns('', url('r^api/', include(api.get_urls())))\r\n```\r\n\r\n## 3. REST endpoints are created automatically\r\nSuppose you have registered the model `EmailRecord` from the app `emailer` with `http_methods=['GET', 'POST', 'DELETE', 'PUT']` and the `fields=['user', 'timestamp', 'body']`.\r\nThen you have included the urls under the prefix `/api/` as above.\r\n\r\n\r\nThen these are the REST endpoints you can request:\r\n\r\n### /api/emailer_emailrecord/\r\n* This is a list resource.\r\n* GET will return a list of results which match the query.\r\n* PUT will modify all results that match the query.\r\n* POST will create a new object.\r\n* DELETE is always forbidden.\r\n\r\n### /api/emailer_emailrecord/{int: id}/\r\n* This is an item resource.\r\n* GET will return the object with that id.\r\n* PUT will modify the object.\r\n* DELETE will delete the object.\r\n* POST is always forbidden.\r\n\r\n## 4. Format of Requests and Responses\r\n\r\n### GET /api/emailer_emailrecord/\r\nResponds with a list of all `EmailRecord` objects, for example:\r\n\r\n```\r\nHTTP 200\r\n{\r\n    \"items\": [\r\n        {\"id\": 1,\r\n         \"body\": \"Dear sir, will you sign up for my site?\",\r\n         \"timestamp\": \"2013-03-15T20:56:13.652681\"},\r\n        {\"id\": 2,\r\n         \"body\": \"Dear miss, will you sign up for my site?\",\r\n         \"timestamp\": \"2013-03-16T20:33:19.952455\"},\r\n        {\"id\": 3,\r\n         \"body\": \"Dear friend, will you sign up for my site?\",\r\n         \"timestamp\": \"2013-03-18T16:14:21.322591\"}\r\n    ]  \r\n}\r\n\r\n```\r\n\r\n### GET /api/emailer_emailrecord/?q={{ query }}\r\nResponds with a list of all `EmailRecord` objects that fit the query parameters. See the Querying API for more information.\r\n\r\n`GET /api/emailer_emailrecord/?q=[{\"field\": \"id\", \"operator\": \"in\", value\": [1,3]}]` would return the following:\r\n\r\n```\r\nHTTP 200\r\n{\r\n    \"items\": [\r\n        {\"id\": 1,\r\n         \"body\": \"Dear sir, will you sign up for my site?\",\r\n         \"timestamp\": \"2013-03-15T20:56:13.652681\"},\r\n        {\"id\": 3,\r\n         \"body\": \"Dear friend, will you sign up for my site?\",\r\n         \"timestamp\": \"2013-03-18T16:14:21.322591\"}\r\n    ]  \r\n}\r\n\r\n```\r\n\r\n### GET /api/emailer_emailrecord/{int: id}\r\nReturns `EmailRecord` with `id: 1`, so `GET /api/emailer_emailrecord/1/` would return the following:\r\n\r\n```\r\nHTTP 200\r\n{\r\n    \"id\": 1,\r\n    \"body\": \"Dear sir, will you sign up for my site?\",\r\n    \"timestamp\": \"2013-03-15T20:56:13.652681\"\r\n}\r\n```\r\n\r\nIf you try to GET for an id that does not correspond to any `EmailRecord`, for example `GET /api/emailer_emailrecord/5/`, you will get:\r\n```\r\nHTTP 400\r\n{\r\n    \"error\": \"No result found matching id: 5\"\r\n}\r\n```\r\n\r\n\r\n### DELETE /api/emailer_emailrecord/{int: id}\r\nDeletes `EmailRecord` with `id: 1`, so `GET /api/emailer_emailrecord/1/` would return the following:\r\n\r\n```\r\nHTTP 204 No Content\r\n```\r\n\r\nIf you try to DELETE for an id that does not correspond to any `EmailRecord`, for example `GET /api/emailer_emailrecord/5/`, you will get:\r\n```\r\nHTTP 400\r\n{\r\n    \"error\": \"No result found matching id: 5\"\r\n}\r\n```\r\n\r\n### POST /api/emailer_emailrecord/\r\nCreates a new `EmailRecord` with from the JSON POST data.\r\n\r\nHere is an example request:\r\n\r\n```\r\nPOST /api/emailer_emailrecord/\r\n{\r\n    \"data\": {\r\n        \"body\": \"New email body\"\r\n        \"timestamp\": \"2013-01-01T12:00:00\",\r\n    }\r\n}\r\n```\r\n\r\nHere would be the response:\r\n\r\n```\r\nHTTP 201\r\n{\r\n    \"id\": 3,\r\n    \"body\": \"New email body\"\r\n    \"timestamp\": \"2013-01-01T12:00:00\",\r\n}\r\n```\r\n\r\nIf you send in the data dictionary any fields that are not on the model, or if the the data that you are creating is not valid by some database constraints, column uniqueness for example, then you will get a 400 error with an error JSON message.\r\n\r\nFor example,\r\n```\r\nPOST /api/emailer_emailrecord/\r\n{\r\n    \"data\": {\r\n        \"crazybody\": \"blahblahblah\"\r\n        \"timestamp\": \"2013-01-01T12:00:00\",\r\n    }\r\n}\r\n```\r\n\r\n```\r\nHTTP 400\r\n{\r\n    \"error\": \"Cannot resolves the following field names: crazybody\"\r\n}\r\n```\r\n\r\n## 5. Querying API\r\n## 6. Authentication\r\n## 7. Restricting resources by user\r\n## 8. Data Serialization\r\n## 9. Pagination\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}